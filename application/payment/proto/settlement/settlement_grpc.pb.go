// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: settlement.proto

package settlement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClearingClient is the client API for Clearing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClearingClient interface {
	PostClearing(ctx context.Context, in *PostClearingRequest, opts ...grpc.CallOption) (*PostClearingResponse, error)
}

type clearingClient struct {
	cc grpc.ClientConnInterface
}

func NewClearingClient(cc grpc.ClientConnInterface) ClearingClient {
	return &clearingClient{cc}
}

func (c *clearingClient) PostClearing(ctx context.Context, in *PostClearingRequest, opts ...grpc.CallOption) (*PostClearingResponse, error) {
	out := new(PostClearingResponse)
	err := c.cc.Invoke(ctx, "/settlement.Clearing/PostClearing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClearingServer is the server API for Clearing service.
// All implementations must embed UnimplementedClearingServer
// for forward compatibility
type ClearingServer interface {
	PostClearing(context.Context, *PostClearingRequest) (*PostClearingResponse, error)
	mustEmbedUnimplementedClearingServer()
}

// UnimplementedClearingServer must be embedded to have forward compatible implementations.
type UnimplementedClearingServer struct {
}

func (UnimplementedClearingServer) PostClearing(context.Context, *PostClearingRequest) (*PostClearingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostClearing not implemented")
}
func (UnimplementedClearingServer) mustEmbedUnimplementedClearingServer() {}

// UnsafeClearingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClearingServer will
// result in compilation errors.
type UnsafeClearingServer interface {
	mustEmbedUnimplementedClearingServer()
}

func RegisterClearingServer(s grpc.ServiceRegistrar, srv ClearingServer) {
	s.RegisterService(&Clearing_ServiceDesc, srv)
}

func _Clearing_PostClearing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostClearingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClearingServer).PostClearing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settlement.Clearing/PostClearing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClearingServer).PostClearing(ctx, req.(*PostClearingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Clearing_ServiceDesc is the grpc.ServiceDesc for Clearing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clearing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settlement.Clearing",
	HandlerType: (*ClearingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostClearing",
			Handler:    _Clearing_PostClearing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settlement.proto",
}
